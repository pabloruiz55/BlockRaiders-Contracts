/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface GameboardInterface extends utils.Interface {
  functions: {
    "color1()": FunctionFragment;
    "color2()": FunctionFragment;
    "getBoard()": FunctionFragment;
    "height()": FunctionFragment;
    "width()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "color1"
      | "color2"
      | "getBoard"
      | "height"
      | "width"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "color1", values?: undefined): string;
  encodeFunctionData(functionFragment: "color2", values?: undefined): string;
  encodeFunctionData(functionFragment: "getBoard", values?: undefined): string;
  encodeFunctionData(functionFragment: "height", values?: undefined): string;
  encodeFunctionData(functionFragment: "width", values?: undefined): string;

  decodeFunctionResult(functionFragment: "color1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "color2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBoard", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "height", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "width", data: BytesLike): Result;

  events: {};
}

export interface Gameboard extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GameboardInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    color1(overrides?: CallOverrides): Promise<[number]>;

    color2(overrides?: CallOverrides): Promise<[number]>;

    getBoard(
      overrides?: CallOverrides
    ): Promise<[number, number, number, number]>;

    height(overrides?: CallOverrides): Promise<[number]>;

    width(overrides?: CallOverrides): Promise<[number]>;
  };

  color1(overrides?: CallOverrides): Promise<number>;

  color2(overrides?: CallOverrides): Promise<number>;

  getBoard(
    overrides?: CallOverrides
  ): Promise<[number, number, number, number]>;

  height(overrides?: CallOverrides): Promise<number>;

  width(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    color1(overrides?: CallOverrides): Promise<number>;

    color2(overrides?: CallOverrides): Promise<number>;

    getBoard(
      overrides?: CallOverrides
    ): Promise<[number, number, number, number]>;

    height(overrides?: CallOverrides): Promise<number>;

    width(overrides?: CallOverrides): Promise<number>;
  };

  filters: {};

  estimateGas: {
    color1(overrides?: CallOverrides): Promise<BigNumber>;

    color2(overrides?: CallOverrides): Promise<BigNumber>;

    getBoard(overrides?: CallOverrides): Promise<BigNumber>;

    height(overrides?: CallOverrides): Promise<BigNumber>;

    width(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    color1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    color2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBoard(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    height(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    width(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
